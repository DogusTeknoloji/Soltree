schema {
  query: Query
  mutation: Mutation
}

type Brand {
  name: String!
  id: UUID!
}

type BrandCollectionSegment {
  items: [Brand!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
}

"Information about the offset pagination."
type CollectionSegmentInfo {
  "Indicates whether more items exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more items exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
}

type DeviceType {
  name: String!
  id: UUID!
}

type DeviceTypeCollectionSegment {
  items: [DeviceType!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
}

type InsertResponse {
  id: UUID!
}

type Model {
  name: String!
  brandId: UUID!
  brand: Brand
  deviceTypeId: UUID!
  deviceType: DeviceType
  id: UUID!
}

type ModelCollectionSegment {
  items: [Model!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
}

type Mutation {
  insertBrand(request: BrandInsertRequestInput!): InsertResponse!
  updateBrand(request: BrandUpdateRequestInput!): Boolean!
  deleteBrand(id: UUID!): Boolean!
  insertModel(request: ModelInsertRequestInput!): InsertResponse!
  updateBrandModel(request: ModelUpdateRequestInput!): Boolean!
  deleteModel(id: UUID!): Boolean!
  insertSolution(request: SolutionInsertRequestInput!): InsertResponse!
  updateSolution(request: SolutionUpdateRequestInput!): Boolean!
  deleteSolution(id: UUID!): Boolean!
  insertSymptom(request: SymptomInsertRequestInput!): InsertResponse!
  updateSymptom(request: SymptomUpdateRequestInput!): Boolean!
  deleteSymptom(id: UUID!): Boolean!
  insertSymptomCategory(request: SymptomCategoryInsertRequestInput!): InsertResponse!
  updateSymptomCategory(request: SymptomCategoryUpdateRequestInput!): Boolean!
  deleteSymptomCategory(id: UUID!): Boolean!
  insertDeviceType(request: DeviceTypeInsertRequestInput!): InsertResponse!
  updateDeviceType(request: DeviceTypeUpdateRequestInput!): Boolean!
  deleteDeviceType(id: UUID!): Boolean!
}

type Query {
  brands(skip: Int take: Int order: [BrandSortInput!] where: BrandFilterInput): BrandCollectionSegment
  models(skip: Int take: Int order: [ModelSortInput!] where: ModelFilterInput): ModelCollectionSegment
  deviceTypes(skip: Int take: Int order: [DeviceTypeSortInput!] where: DeviceTypeFilterInput): DeviceTypeCollectionSegment
  solutions(skip: Int take: Int order: [SolutionSortInput!] where: SolutionFilterInput): SolutionCollectionSegment
  symptoms(skip: Int take: Int order: [SymptomSortInput!] where: SymptomFilterInput): SymptomCollectionSegment
  symptomCategorys(skip: Int take: Int order: [SymptomCategorySortInput!] where: SymptomCategoryFilterInput): SymptomCategoryCollectionSegment
}

type Solution {
  title: String!
  description: String!
  id: UUID!
}

type SolutionCollectionSegment {
  items: [Solution!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
}

type Symptom {
  name: String!
  symptomCategoryId: UUID!
  symptomCategory: SymptomCategory
  id: UUID!
}

type SymptomCategory {
  name: String!
  id: UUID!
}

type SymptomCategoryCollectionSegment {
  items: [SymptomCategory!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
}

type SymptomCollectionSegment {
  items: [Symptom!]
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
}

input BrandFilterInput {
  and: [BrandFilterInput!]
  or: [BrandFilterInput!]
  name: StringOperationFilterInput
  id: ComparableGuidOperationFilterInput
}

input BrandInsertRequestInput {
  name: String!
}

input BrandSortInput {
  name: SortEnumType
  id: SortEnumType
}

input BrandUpdateRequestInput {
  id: UUID!
  name: String!
}

input ComparableGuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID!]
  nin: [UUID!]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

input ComparableNullableOfGuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

input DeviceTypeFilterInput {
  and: [DeviceTypeFilterInput!]
  or: [DeviceTypeFilterInput!]
  name: StringOperationFilterInput
  id: ComparableGuidOperationFilterInput
}

input DeviceTypeInsertRequestInput {
  name: String!
}

input DeviceTypeSortInput {
  name: SortEnumType
  id: SortEnumType
}

input DeviceTypeUpdateRequestInput {
  id: UUID!
  name: String!
}

input ModelFilterInput {
  and: [ModelFilterInput!]
  or: [ModelFilterInput!]
  name: StringOperationFilterInput
  brandId: ComparableNullableOfGuidOperationFilterInput
  brand: BrandFilterInput
  deviceTypeId: ComparableNullableOfGuidOperationFilterInput
  deviceType: DeviceTypeFilterInput
  id: ComparableGuidOperationFilterInput
}

input ModelInsertRequestInput {
  name: String!
  brandId: UUID!
  deviceTypeId: UUID!
}

input ModelSortInput {
  name: SortEnumType
  brandId: SortEnumType
  brand: BrandSortInput
  deviceTypeId: SortEnumType
  deviceType: DeviceTypeSortInput
  id: SortEnumType
}

input ModelUpdateRequestInput {
  id: UUID!
  name: String!
}

input SolutionFilterInput {
  and: [SolutionFilterInput!]
  or: [SolutionFilterInput!]
  title: StringOperationFilterInput
  description: StringOperationFilterInput
  id: ComparableGuidOperationFilterInput
}

input SolutionInsertRequestInput {
  title: String!
  description: String!
}

input SolutionSortInput {
  title: SortEnumType
  description: SortEnumType
  id: SortEnumType
}

input SolutionUpdateRequestInput {
  id: UUID!
  title: String!
  description: String!
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input SymptomCategoryFilterInput {
  and: [SymptomCategoryFilterInput!]
  or: [SymptomCategoryFilterInput!]
  name: StringOperationFilterInput
  id: ComparableGuidOperationFilterInput
}

input SymptomCategoryInsertRequestInput {
  name: String!
}

input SymptomCategorySortInput {
  name: SortEnumType
  id: SortEnumType
}

input SymptomCategoryUpdateRequestInput {
  id: UUID!
  name: String!
}

input SymptomFilterInput {
  and: [SymptomFilterInput!]
  or: [SymptomFilterInput!]
  name: StringOperationFilterInput
  symptomCategoryId: ComparableNullableOfGuidOperationFilterInput
  symptomCategory: SymptomCategoryFilterInput
  id: ComparableGuidOperationFilterInput
}

input SymptomInsertRequestInput {
  name: String!
  symptomCategoryId: UUID!
}

input SymptomSortInput {
  name: SortEnumType
  symptomCategoryId: SortEnumType
  symptomCategory: SymptomCategorySortInput
  id: SortEnumType
}

input SymptomUpdateRequestInput {
  id: UUID!
  name: String!
  symptomCategoryId: UUID!
}

enum SortEnumType {
  ASC
  DESC
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! = 0 "Streamed when true." if: Boolean) on FIELD

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")